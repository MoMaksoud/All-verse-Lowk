rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Users can ONLY access their own listing photos
    match /listing-photos/{uid}/{listingId}/{allPaths=**} {
      allow read, list: if isOwner(uid);
      allow write: if isOwner(uid);
    }

    // Users can ONLY access their own profile pictures
    match /users/{uid}/profile/{allPaths=**} {
      allow read, list: if isOwner(uid);
      allow write: if isOwner(uid);
    }

    // Users can ONLY access their own listing videos
    match /users/{uid}/listings/{listingId}/videos/{allPaths=**} {
      allow read, list: if isOwner(uid);
      allow write: if isOwner(uid);
    }

    // Users can ONLY access their own chat attachments
    match /users/{uid}/chats/{conversationId}/{allPaths=**} {
      allow read, list: if isOwner(uid);
      allow write: if isOwner(uid);
    }

    // Temporary uploads - users can upload temporary files
    match /temp/{uid}/{allPaths=**} {
      allow read, write: if isOwner(uid);
    }

    // Legacy paths for backward compatibility (will be migrated)
    match /profile-pictures/{fileName} {
      allow read: if true; // Public read access for legacy profile pictures
      allow write: if isSignedIn();
    }

    match /listing-photos/{fileName} {
      allow read: if true; // Public read access for legacy listing photos
      allow write: if isSignedIn();
    }

    match /listing-videos/{fileName} {
      allow read: if true; // Public read access for legacy listing videos
      allow write: if isSignedIn();
    }

    match /chat-attachments/{fileName} {
      allow read: if true; // Public read access for legacy chat attachments
      allow write: if isSignedIn();
    }

    // Default deny rule for any other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
